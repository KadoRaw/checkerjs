!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.checkerjs=t():e.checkerjs=t()}(this,(()=>(()=>{"use strict";var e={211:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>!e.every((e=>null!=e))},333:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>Array.isArray(e)},799:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t,r,n)=>e.indexOf(t)>=r&&e.indexOf(t)<=n},294:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=(e,t)=>{if(e===t)return!0;if(null==e||"object"!=typeof e||null==t||"object"!=typeof t)return!1;const n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(const s of n)if(!o.includes(s)||!r(e[s],t[s]))return!1;return!0};t.default=r},283:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>Object.keys(e).some((t=>Object.isFrozen(e[t])))}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}var n={};return(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.isAnyKeyHasFreez=e.deepEquality=e.isInRange=e.isAnyNullorUndefined=e.isArray=void 0;const t=r(333);e.isArray=t.default;const o=r(211);e.isAnyNullorUndefined=o.default;const s=r(799);e.isInRange=s.default;const u=r(283);e.isAnyKeyHasFreez=u.default;const d=r(294);e.deepEquality=d.default})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUFtQixVQUFJRCxJQUV2QkQsRUFBZ0IsVUFBSUMsR0FDckIsQ0FURCxDQVNHSyxNQUFNLEksdUZDSFQsVUFOOEJDLElBQ3BCQSxFQUFJQyxPQUFNQyxHQUNUQSxTLCtEQ0FYLFVBRmlCQyxHQUFjQyxNQUFNQyxRQUFRRixFLCtEQ0k3QyxVQUprQixDQUFDQSxFQUFhRCxFQUFXSSxFQUFhQyxJQUMvQ0osRUFBS0ssUUFBUU4sSUFBU0ksR0FBT0gsRUFBS0ssUUFBUU4sSUFBU0ssQywrRENENUQsTUFBTUUsRUFBZSxDQUFDQyxFQUFRQyxLQUM1QixHQUFJRCxJQUFNQyxFQUFHLE9BQU8sRUFDcEIsR0FBUyxNQUFMRCxHQUF5QixpQkFBTEEsR0FBc0IsTUFBTEMsR0FBeUIsaUJBQUxBLEVBQWUsT0FBTyxFQUNuRixNQUFNQyxFQUFRQyxPQUFPQyxLQUFLSixHQUN4QkssRUFBUUYsT0FBT0MsS0FBS0gsR0FDdEIsR0FBSUMsRUFBTUksU0FBV0QsRUFBTUMsT0FBUSxPQUFPLEVBQzFDLElBQUssTUFBTUMsS0FBT0wsRUFDaEIsSUFBS0csRUFBTUcsU0FBU0QsS0FBU1IsRUFBYUMsRUFBRU8sR0FBTU4sRUFBRU0sSUFBTyxPQUFPLEVBRXBFLE9BQU8sQ0FBSSxFQUdiLFVBQWVSLEMsK0RDUmYsVUFKMEJVLEdBQ2pCTixPQUFPQyxLQUFLSyxHQUFLQyxNQUFLSCxHQUFPSixPQUFPUSxTQUFTRixFQUFJRixLLEdDQXRESyxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWE5QixRQUdyQixJQUFJQyxFQUFTMEIsRUFBeUJFLEdBQVksQ0FHakQ3QixRQUFTLENBQUMsR0FPWCxPQUhBZ0MsRUFBb0JILEdBQVU1QixFQUFRQSxFQUFPRCxRQUFTNEIsR0FHL0MzQixFQUFPRCxPQUNmLEMsb0tDdEJBLGVBT1MsRUFBQVUsUUFQRixVQUNQLGVBTWtCLEVBQUF1QixxQkFOWCxVQUNQLGVBS3dDLEVBQUFDLFVBTGpDLFVBRVAsZUFHaUUsRUFBQUMsaUJBSDFELFVBQ1AsZUFFbUQsRUFBQXJCLGFBRjVDLFMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2VyanMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2NoZWNrZXJqcy8uL3NyYy9BcnJheS9pc0FueU51bGxvclVuZGVmaW5lZC50cyIsIndlYnBhY2s6Ly9jaGVja2VyanMvLi9zcmMvQXJyYXkvaXNBcnJheS50cyIsIndlYnBhY2s6Ly9jaGVja2VyanMvLi9zcmMvQXJyYXkvaXNJblJhbmdlLnRzIiwid2VicGFjazovL2NoZWNrZXJqcy8uL3NyYy9PYmplY3QvZGVlcEVxdWFsaXR5LnRzIiwid2VicGFjazovL2NoZWNrZXJqcy8uL3NyYy9PYmplY3QvaXNBbnlLZXlIYXNGcmVlei50cyIsIndlYnBhY2s6Ly9jaGVja2VyanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2hlY2tlcmpzLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImNoZWNrZXJqc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJjaGVja2VyanNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwiY29uc3QgaXNBbnlOdWxsb3JVbmRlZmluZWQgPSAoYXJyOiBhbnlbXSk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gIWFyci5ldmVyeShpdGVtID0+IHtcbiAgICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiBpdGVtICE9PSB1bmRlZmluZWQ7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBbnlOdWxsb3JVbmRlZmluZWQ7XG4iLCJjb25zdCBpc0FycmF5ID0gKGRhdGE6IGFueSkgPT4gQXJyYXkuaXNBcnJheShkYXRhKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsImNvbnN0IGlzSW5SYW5nZSA9IChkYXRhOiBhbnlbXSwgaXRlbTogYW55LCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGRhdGEuaW5kZXhPZihpdGVtKSA+PSBtaW4gJiYgZGF0YS5pbmRleE9mKGl0ZW0pIDw9IG1heDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5SYW5nZTtcbiIsImNvbnN0IGRlZXBFcXVhbGl0eSA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gIGlmIChhID09IG51bGwgfHwgdHlwZW9mIGEgIT0gXCJvYmplY3RcIiB8fCBiID09IG51bGwgfHwgdHlwZW9mIGIgIT0gXCJvYmplY3RcIikgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKGEpLFxuICAgIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzQSkge1xuICAgIGlmICgha2V5c0IuaW5jbHVkZXMoa2V5KSB8fCAhZGVlcEVxdWFsaXR5KGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVlcEVxdWFsaXR5O1xuIiwiY29uc3QgaXNBbnlLZXlIYXNGcmVleiA9IChvYmo6IGFueSkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5zb21lKGtleSA9PiBPYmplY3QuaXNGcm96ZW4ob2JqW2tleV0pKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQW55S2V5SGFzRnJlZXo7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSBcIi4vQXJyYXkvaXNBcnJheVwiO1xuaW1wb3J0IGlzQW55TnVsbG9yVW5kZWZpbmVkIGZyb20gXCIuL0FycmF5L2lzQW55TnVsbG9yVW5kZWZpbmVkXCI7XG5pbXBvcnQgaXNJblJhbmdlIGZyb20gXCIuL0FycmF5L2lzSW5SYW5nZVwiO1xuLy8gT2JqZWN0XG5pbXBvcnQgaXNBbnlLZXlIYXNGcmVleiBmcm9tIFwiLi9PYmplY3QvaXNBbnlLZXlIYXNGcmVlelwiO1xuaW1wb3J0IGRlZXBFcXVhbGl0eSBmcm9tIFwiLi9PYmplY3QvZGVlcEVxdWFsaXR5XCI7XG5cbmV4cG9ydCB7IGlzQXJyYXksIGlzQW55TnVsbG9yVW5kZWZpbmVkLCBpc0luUmFuZ2UsIGRlZXBFcXVhbGl0eSwgaXNBbnlLZXlIYXNGcmVleiB9O1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJhcnIiLCJldmVyeSIsIml0ZW0iLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwibWluIiwibWF4IiwiaW5kZXhPZiIsImRlZXBFcXVhbGl0eSIsImEiLCJiIiwia2V5c0EiLCJPYmplY3QiLCJrZXlzIiwia2V5c0IiLCJsZW5ndGgiLCJrZXkiLCJpbmNsdWRlcyIsIm9iaiIsInNvbWUiLCJpc0Zyb3plbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJpc0FueU51bGxvclVuZGVmaW5lZCIsImlzSW5SYW5nZSIsImlzQW55S2V5SGFzRnJlZXoiXSwic291cmNlUm9vdCI6IiJ9